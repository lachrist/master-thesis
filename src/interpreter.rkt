#lang racket

;; locus interface
(define (locus:union locus1 locus2) null)
(define (locus:enforce locus polytype monotype) null)
(define (locus:release locus polytype) null)

;; env interface
(define (dico:add env id value) null)
(define (dico:lookup env id) null)

;; Values are constants, lambdas, mono or poly
(struct monoproc (env param body) #:mutable)   ; monomorphic procedure
(struct polyproc (polytype monotype monoproc))      ; subtyped polymorphic procedure
(struct lval (locus value))

(define (tagged-list? expr tag)
  (and (list? expr) (not (null? expr)) (eq? (car expr))))

(define (eval expr env locus)
  (cond ((tagged-list? expr 'lambda) (eval-abs expr env locus))
        ((tagged-list? expr 'let)    (eval-let expr env locus))
        ((tagged-list? expr 'if)     (eval-if expr env locus))
        ((tagged-list? expr 'sub)    (eval-sub expr env locus))
        ((symbol? expr)              (eval-id expr env locus))
        ((not (list? expr))          (eval-const expr env locus))
        (else                        (eval-app expr env locus))))

;; (lambda <param> <body>)
(define (eval-abs expr env locus)
  (let ((param (car (cdr expr)))
        (body  (car (cdr (cdr expr)))))
    (lval locus (monoproc env param body))))

;; (let <param> <bind> <body>)
(define (eval-let expr env locus)
  (let* ((param      (car (cdr expr)))
         (bind       (car (cdr (cdr expr))))
         (body       (car (cdr (cdr (cdr expr)))))
         (bind-lval  (eval bind env locus))
         (bind-value (lval-value bind-lval))
         (bind-locus (lval-locus bind-lval))
         (ext-env    (dico:add env param bind-value)))
    (when (tagged-list? (car (cdr (cdr expr))) 'lambda)
      (set-monoproc-env! bind-value ext-env))
    (eval body ext-env bind-locus)))

;; (if <pred> <then-locus> <then> <else-locus> <else>)
(define (eval-if expr env locus)
  (let* ((pred       (car (cdr expr)))
         (then-locus (car (cdr (cdr expr))))
         (then       (car (cdr (cdr (cdr expr)))))
         (else-locus  (car (cdr (cdr (cdr (cdr expr))))))
         (else        (car (cdr (cdr (cdr (cdr (cdr expr)))))))
         (pred-lval  (eval pred env locus))
         (pred-locus (lval-locus pred-lval))
         (pred-value (lval-value pred-lval)))
    (if (eq? pred-value #f)
        (eval else env (locus:union locus else-locus))
        (eval then env (locus:union locus then-locus)))))

;; (sub <polytype> <monotype> <proc>)
(define (eval-sub expr env locus)
  (let* ((polytype (car (cdr expr)))
         (monotype (car (cdr (cdr expr))))
         (proc (car (cdr (cdr (cdr expr)))))
         (proc-lval (eval proc env locus))
         (proc-locus (lval-locus proc-lval))
         (proc-value (lval-value proc-lval)))
    (lval proc-locus (polyproc polytype monotype proc-value))))

(define (eval-id expr env locus)
  (lval locus (dico:lookup env expr)))

(define (eval-const expr env locus)
  (lval locus expr))

;; (<proc> <arg>)
(define (eval-app expr env locus)
  (define (apply-prim proc-value arg-value locus)
    (lval locus (proc-value arg-value)))
  (define (apply-mono proc-value arg-value locus)
    (eval (monoproc-body proc-value)
          (dico:add env (monoproc-param proc-value) (arg-value))
          locus))
  (define (apply-poly proc-value arg-value locus)
    (let* ((monoproc       (polyproc-monoproc proc-value))
           (polytype       (polyproc-polytype proc-value))
           (monotype       (polyproc-monotype proc-value))
           (enforced-locus (locus:enforce locus polytype monotype))
           (lval-mono      (apply-mono monoproc arg-value enforced-locus)))
      (lval (locus:release (lval-locus lval-mono) polytype)
            (lval-value lval-mono))))
  (let* ((proc       (car expr))
         (arg        (car (cdr expr)))
         (proc-lval  (eval proc env locus))
         (proc-locus (lval-locus proc-lval))
         (proc-value  (lval-value proc-lval))
         (arg-lval   (eval arg env proc-locus))
         (arg-locus  (lval-locus arg-lval))
         (arg-value  (lval-value arg-lval)))
    (cond ((procedure? proc-value) (apply-prim proc-value arg-value arg-locus))
          ((monoproc? proc-value) (apply-mono proc-value arg-value arg-locus))
          ((polyproc? proc-value) (apply-poly proc-value arg-value arg-locus))
          (else (error "cannot apply")))))