#lang racket

(require "type.rkt" "env.rkt" "expr.rkt" "dico.rkt" "locus.rkt" "set.rkt")

(provide infer:perform)

(struct idiom (locus type expr links))
(struct idioms (locus types exprs links))

(define (infer:perform exprs)
  (let ((is (infer-all exprs (env:make-infer))))
    (map (lambda (expr) (finalize-breadth expr (idioms-locus is))) (idioms-exprs is))))

(define (infer-all exprs env)
  (define locus (locus:universe))
  (define types '())
  (define links (set:make-empty))
  (let ((exprs (map (lambda (expr)
                      (let ((i (infer expr env)))
                        (set! locus (locus:intersect locus (idiom-locus i)))
                        (set! types (append types (list (idiom-type i))))
                        (set! links (set:add-set links (idiom-links i)))
                        (idiom-expr i)))
                    exprs)))
    (idioms locus types exprs links)))

(define (infer expr env)
  (cond ((expr:const? expr) (infer-const expr env))
        ((expr:id? expr) (infer-id expr env))
        ((expr:app? expr) (infer-app expr env))
        ((expr:abs? expr) (infer-abs expr env))
        ((expr:assign? expr) (infer-assign expr env))
        ((expr:sif? expr) (infer-sif expr env))
        ((expr:dif? expr) (infer-dif expr env))
        ((expr:def? expr) (infer-def expr env))
        ((expr:vif? expr) (infer-vif expr env))
        ((expr:unsafe? expr) (infer-unsafe expr env))
        (else (error "invalid expression" expr))))

(define (infer-const const env)
  (let ((type (cond ((number? (expr:const-value const)) (type:make-num))
                    ((string? (expr:const-value const)) (type:make-str))
                    ((boolean? (expr:const-value const)) (type:make-bool))
                    (else (raise (string-append "Type error: unable to type the constant " (expr:const-value const) ".\n"))))))
    (idiom (locus:universe) type const (set:make-empty))))

(define (infer-id id env)
  (let ((type (env:lookup env (expr:id-value id))))
    (if (type:ptype? type)
        (let* ((dico (type:ptype-subst type))
               (mtype (type:ptype-inst type dico)))
          (idiom (locus:universe)
                 mtype
                 (expr:make-lid (expr:id-value id) dico)
                 (set:from-list (dico:values dico))))
        (idiom (locus:universe) type id (set:make-empty)))))

(define (infer-app app env)
  (let* ((is (infer-all (cons (expr:app-abs app) (expr:app-args app)) env))
         (var (type:make-var!))
         (app-locus (locus:from-constraint (type:make-abs (cdr (idioms-types is)) var) (car (idioms-types is))))
         (final-locus (locus:intersect app-locus (idioms-locus is))))
    (idiom final-locus
           var
           (expr:make-app (car (idioms-exprs is)) (cdr (idioms-exprs is)))
           (set:add (idioms-links is) var))))

(define (infer-abs abs env)
  (let* ((params (expr:abs-params abs))
         (param-vars (map (lambda (param) (type:make-var!)) params))
         (ext-env (env:add-all (env:push-frame env) params param-vars))
         (is (infer-all (expr:abs-body abs) ext-env)))
    (idiom (idioms-locus is)
           (type:make-abs param-vars (last (idioms-types is)))
           (expr:make-abs params (idioms-exprs is))
           (set:add-list (idioms-links is) param-vars))))

(define (infer-assign assign env)
  (let* ((type (env:lookup env (expr:assign-param assign)))
         (i (infer (expr:assign-bind assign) env))
         (new-type (idiom-type i)))
    (cond ((type:ptype? type) (raise "Type error: a polymorphic value cannot be assignated."))
          ((type:ptype? new-type) (error "this should never happend, but who kowns???"))
          (else (idiom (locus:intersect (idiom-locus i) (locus:from-constraint type new-type))
                       (type:make-void)
                       (expr:make-assign (expr:assign-param assign) (idiom-expr i))
                       (idiom-links i))))))

(define (infer-def def env)
  (if (expr:abs? (expr:def-bind def))
      (let* ((name (expr:def-name def))
             (var (type:make-var!))
             (ext-env (env:add (env:push-frame env) name var))
             (i (infer (expr:def-bind def) env))
             (locus (locus:intersect (idiom-locus i) (locus:from-constraint (idiom-type i) var)))
             (vars (set:add (idiom-links i) var))
             (inner-vars (locus:closure locus vars))
             (poly-type (type:make-ptype inner-vars (locus:project locus var))))
        (env:add! env name poly-type)
        (idiom locus
               (type:make-void)
               (expr:make-def name (idiom-expr i))
               (set:remove-set vars inner-vars)))
      (let* ((name (expr:def-name def))
             (i (infer (expr:def-bind def) env)))
        (env:add! env name (idiom-type i))
        (idiom (idiom-locus i)
               (type:make-void)
               (expr:make-def name (idiom-expr i))
               (idiom-links i)))))

(define (infer-sif sif env)
  (let* ((is (infer-all (list (expr:sif-pred sif) (expr:sif-cons sif) (expr:sif-alt sif)) env))
         (pred-expr (car (idioms-exprs is)))
         (cons-expr (car (cdr (idioms-exprs is))))
         (alt-expr (car (cdr (cdr (idioms-exprs is)))))
         (cons-type (car (cdr (idioms-types is))))
         (alt-type (car (cdr (cdr (idioms-types is))))))
    (idiom (locus:intersect (idioms-locus is) (locus:from-constraint cons-type alt-type))
           cons-type
           (expr:make-sif pred-expr cons-expr alt-expr)
           (idioms-links is))))

(define (infer-unsafe unsafe env)
  (let ((i (infer (expr:unsafe-expr unsafe) env)))
    (idiom (idiom-locus i)
           (idiom-type i)
           (expr:make-unsafe (idiom-expr i))
           (idiom-links i))))

(define (infer-vif vif env)
  (let ((var (type:make-var!)))
    (idiom (locus:universe)
           var
           (expr:make-dvif (expr:vif-attempt vif)
                           (expr:vif-alt vif)
                           env
                           var)
           (set:from-list (list var)))))

(define (infer-dif dif env)
  (let ((var (type:make-var!))
        (i-pred (infer (expr:dif-pred dif) env)))
    (idiom (idiom-locus i-pred)
           var
           (expr:make-ddif (idiom-expr i-pred)
                           (expr:dif-cons dif)
                           (expr:dif-alt dif)
                           env
                           var)
           (set:add (idiom-links i-pred) var))))

(define (finalize-breadth expr locus)
  (define (perform expr)
    (cond ((expr:const? expr) expr)
          ((expr:id? expr) expr)
          ((expr:lid? expr) (expr:make-lid (expr:lid-value expr) (dico:map-value (expr:lid-dico expr) (lambda (type) (locus:project locus type)))))
          ((expr:app? expr) (expr:make-app (perform (expr:app-abs expr)) (map perform (expr:app-args expr))))
          ((expr:abs? expr) (expr:make-abs (expr:abs-params expr) (map perform (expr:abs-body expr))))
          ((expr:assign? expr) (expr:make-assign (expr:assign-param expr) (perform (expr:assign-bind expr))))
          ((expr:def? expr) (expr:make-def (expr:def-name expr) (perform (expr:def-bind expr))))          
          ((expr:sif? expr) (expr:make-sif (perform (expr:sif-pred expr)) (perform (expr:sif-cons expr)) (perform (expr:sif-alt expr))))
          ((expr:unsafe? expr) (expr:make-unsafe (perform (expr:unsafe-expr expr))))
          ((expr:ddif? expr) (finalize-ddif expr locus))
          ((expr:dvif? expr) (finalize-dvif expr locus))
          (else (error "unknwon expression" expr))))
  (perform expr))

(define (finalize-ddif ddif locus)
  (let* ((env (env:project (expr:ddif-env ddif) locus))
         (i-cons (infer (expr:ddif-cons ddif) env))
         (l-cons (locus:intersect (idiom-locus i-cons) (locus:from-constraint (expr:ddif-type ddif) (idiom-type i-cons))))
         (i-alt (infer (expr:ddif-alt ddif) env))
         (l-alt (locus:intersect (idiom-locus i-alt) (locus:from-constraint (expr:ddif-type ddif) (idiom-type i-alt)))))
    (expr:make-ldif (expr:ddif-pred ddif)
                    l-cons
                    (finalize-breadth (idiom-expr i-cons) l-cons)
                    l-alt
                    (finalize-breadth (idiom-expr i-alt) l-alt))))

(define (finalize-dvif dvif locus)
  (let* ((env (env:project (expr:dvif-env dvif) locus))
         (i-attempt (infer (expr:dvif-attempt dvif) env))
         (l-attempt (locus:intersect (idiom-locus i-attempt) (locus:from-constraint (expr:dvif-type dvif) (idiom-type i-attempt))))
         (i-alt (infer (expr:dvif-alt dvif) env))
         (l-alt (locus:intersect (idiom-locus i-alt) (locus:from-constraint (expr:dvif-type dvif) (idiom-type i-alt)))))
    (expr:make-lvif l-attempt
                    (finalize-breadth (idiom-expr i-attempt) l-attempt)
                    l-alt
                    (finalize-breadth (idiom-expr i-alt) l-alt))))